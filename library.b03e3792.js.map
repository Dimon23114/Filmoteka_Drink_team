{"mappings":"oeAAAA,EAAA,S,iCCAAA,EAAA,S,4BAGA,MAAMC,EAAkBC,SAASC,cAAc,0BACzCC,EAAaF,SAASC,cAAc,gBACpCE,EAAWH,SAASC,cAAc,cASxC,SAASG,EAAoBC,GAEzB,MAAMC,EAAa,GAIbC,GAHYF,EAAKE,OAAOC,KAAIC,IAC9BH,EAAWI,KAAKD,EAAME,KAAK,IAEhBL,EAAWM,KAAK,OAEzBC,EAAOR,EAAKS,aAAaC,MAAM,EAAG,IAAMV,EAAKW,eAAeD,MAAM,EAAG,GAC3EE,QAAQC,IAAIL,GAkBZ,MAhBe,0FACsCR,EAAKc,oJAGZd,EAAKe,kCACpCf,EAAKgB,gBAAkBhB,EAAKM,gCACxBN,EAAKc,qIAG0Bd,EAAKc,qBAC7Cd,EAAKgB,gBAAkBhB,EAAKM,8EAEUN,EAAKc,OAAOZ,OAAYM,wD,CAM5E,SAASS,EAAgBC,GACrBA,EAAIC,iBAEJ,MAAMC,EAAUC,aAAaC,QAAQ,gBAC/BC,EAAeH,EAAUI,KAAKC,MAAML,GAAW,GAEzB,IAAxBG,EAAaG,OACbhC,EAAgBiC,UAAY,6HAK5BJ,EAAapB,KAAIH,IACbN,EAAgBkC,mBAAmB,YAAa7B,EAAoBC,GAAM,G,CAqCtF,SAAS6B,IACLnC,EAAgBiC,UAAY,E,CAxFhCjC,EAAgBoC,iBAAiB,QAASC,EAAAC,cAC1CtC,EAAgBoC,iBAAiB,QAASC,EAAAE,mBAC1CC,OAAOJ,iBAAiB,OAAQb,GAChCnB,EAASgC,iBAAiB,SA4E1B,SAAwBZ,GACpBA,EAAIC,iBACJtB,EAAWsC,UAAUC,OAAO,eAC5BtC,EAASqC,UAAUE,IAAI,eACvBH,OAAOI,oBAAoB,OAAQrB,GACnCY,IA7BJ,SAAwBX,GACpBA,EAAIC,iBAEJ,MAAMoB,EAAQlB,aAAaC,QAAQ,cAC7BkB,EAAaD,EAAQf,KAAKC,MAAMc,GAAS,GAErB,IAAtBC,EAAWd,OACXhC,EAAgBiC,UAAY,4HAK5Ba,EAAWrC,KAAIH,IACXN,EAAgBkC,mBAAmB,YAAa7B,EAAoBC,GAAM,G,CAiBlFyC,CAAevB,E,IAjFnBrB,EAAWiC,iBAAiB,SAoE5B,SAAwBZ,GACpBA,EAAIC,iBACJrB,EAASqC,UAAUC,OAAO,eAC1BvC,EAAWsC,UAAUE,IAAI,eACzBR,IACAZ,EAAgBC,E,IAxEpBxB,EAAgBoC,iBAAiB,SAqFjC,SAAmBZ,GACfA,EAAIC,iBAEJuB,YAAW,KACP,MAAMC,EAAkBhD,SAASC,cAAc,qEACzCgD,EAAgBjD,SAASC,cAAc,qEAEvCiD,EAAcrB,KAAKC,MAAMJ,aAAaC,QAAQ,iBAC9CwB,EAAatB,KAAKC,MAAMJ,aAAaC,QAAQ,eAE7CyB,EADcJ,EAAgBK,QAAQ,OACdC,aAAa,MAElBJ,EAAY1C,KAAI+C,IACjCA,EAAKpC,KAAOqC,OAAOJ,KACnBJ,EAAgBS,YAAc,sBAAqB,IAEnCN,EAAW3C,KAAI+C,IAC/BA,EAAKpC,KAAOqC,OAAOJ,KACnBH,EAAcQ,YAAc,oBAAmB,GACrD,GACH,I","sources":["src/library.js","src/js/getFromStorage.js"],"sourcesContent":["import { refs } from './js/refs';\nimport { onTopBallon } from './js/component/btn-to-top';\nimport './js/day-night';\nimport './js/teamModal';\nimport './js/getFromStorage';\nimport './js/set-to-watched';","import axios from \"axios\"\nimport { toggleClassHidden, openBackDrop, cleanBackDrop, modalKeyDown, closeModal } from \"./openModal\"\nimport { refs } from \"./refs\"\nconst libraryMainList = document.querySelector(\"[data-film-modal-open]\")\nconst watchedBTN = document.querySelector(\".watched-btn\")\nconst queueBTN = document.querySelector(\".queue-btn\")\nlibraryMainList.addEventListener(\"click\", openBackDrop)\nlibraryMainList.addEventListener(\"click\", toggleClassHidden)\nwindow.addEventListener(\"load\", showWatchedList)\nqueueBTN.addEventListener(\"click\", openOqueueList)\nwatchedBTN.addEventListener(\"click\", openWathedList)\nlibraryMainList.addEventListener(\"click\", getToBtns)\n\n\nfunction createLibraryMarkup(film) {\n\n    const genresList = []\n    const genreList = film.genres.map(genre => {\n        genresList.push(genre.name)\n    })\n    const genres = genresList.join(', ')\n    \n    const date = film.release_date.slice(0, 4) || film.first_air_date.slice(0, 4)\n    console.log(date);\n\n    const markup = `<li class=\"main-render__item\">\n        <a href=\"#\" class=\"main-render__link\" data-id=\"${film.id}\">\n        <div class=\"main-render__image-box\">\n            <img class=\"main-render__image\"\n            src=\"https://image.tmdb.org/t/p/w500${film.poster_path}\"\n            alt=\"${film.original_title || film.name}\" \n            data-id=\"${film.id}\">\n            </div>\n            <div class=\"main-render__discription\">\n            <h2 class=\"main-render__title\" data-id=\"${film.id}\">\n            ${film.original_title || film.name}\n            </h2>\n            <p class=\"main-render__text\" data-id=\"${film.id}\">${genres} | ${date}</p>\n            </div>\n        </a>\n        </li>`\n    return markup\n}\nfunction showWatchedList(evt) {\n    evt.preventDefault()\n\n    const watched = localStorage.getItem(\"watched_list\")\n    const watchedFilms = watched ? JSON.parse(watched) : []\n\n    if (watchedFilms.length === 0) {\n        libraryMainList.innerHTML = `<li class=\"api-error\">\n            <p class=\"api-error__desc\">The list of watched movies is empty.</p>\n            </li>`\n    }\n    else {\n        watchedFilms.map(film => {\n            libraryMainList.insertAdjacentHTML(\"beforeend\", createLibraryMarkup(film))\n        })\n        \n    }\n}\nfunction showQueuedList(evt) {\n    evt.preventDefault()\n\n    const queue = localStorage.getItem(\"queue_list\")\n    const queueFilms = queue ? JSON.parse(queue) : []\n\n    if (queueFilms.length === 0) {\n        libraryMainList.innerHTML = `<li class=\"api-error\">\n            <p class=\"api-error__desc\">The list of queued movies is empty.</p>\n            </li>`\n    }\n    else {\n        queueFilms.map(film => {\n            libraryMainList.insertAdjacentHTML(\"beforeend\", createLibraryMarkup(film))\n        })\n    }\n}\nfunction openWathedList(evt) {\n    evt.preventDefault()\n    queueBTN.classList.remove(\"btn--active\")\n    watchedBTN.classList.add(\"btn--active\")\n    cleanLibrary()\n    showWatchedList(evt)\n}\nfunction openOqueueList(evt) {\n    evt.preventDefault()\n    watchedBTN.classList.remove(\"btn--active\")\n    queueBTN.classList.add(\"btn--active\")\n    window.removeEventListener(\"load\", showWatchedList)\n    cleanLibrary()\n    showQueuedList(evt)\n}\nfunction cleanLibrary() {\n    libraryMainList.innerHTML = \"\"\n}\nfunction getToBtns(evt) {\n    evt.preventDefault()\n\n    setTimeout(() => {\n        const watchedModalBtn = document.querySelector(\"#backdrop > div > div > div > div > ul > li:nth-child(1) > button\") \n        const queueModalBtn = document.querySelector(\"#backdrop > div > div > div > div > ul > li:nth-child(2) > button\") \n\n        const watchedList = JSON.parse(localStorage.getItem(\"watched_list\"))\n        const queuedList = JSON.parse(localStorage.getItem(\"queue_list\"))\n        const currentLink = watchedModalBtn.closest(\"div\")\n        const currentId = currentLink.getAttribute(\"id\")\n\n        const watchedInfoItems = watchedList.map(item => {\n            if (item.id === Number(currentId))\n                watchedModalBtn.textContent = \"remove from watched\"\n        })\n        const queuedListItems = queuedList.map(item => {\n            if (item.id === Number(currentId))\n                queueModalBtn.textContent = \"remove from queue\"\n        })\n    }, 300);\n}\n\n"],"names":["parcelRequire","$b936b88fd014d8ec$var$libraryMainList","document","querySelector","$b936b88fd014d8ec$var$watchedBTN","$b936b88fd014d8ec$var$queueBTN","$b936b88fd014d8ec$var$createLibraryMarkup","film","genresList","genres","map","genre","push","name","join","date","release_date","slice","first_air_date","console","log","id","poster_path","original_title","$b936b88fd014d8ec$var$showWatchedList","evt","preventDefault","watched","localStorage","getItem","watchedFilms","JSON","parse","length","innerHTML","insertAdjacentHTML","$b936b88fd014d8ec$var$cleanLibrary","addEventListener","$6K2nx","openBackDrop","toggleClassHidden","window","classList","remove","add","removeEventListener","queue","queueFilms","$b936b88fd014d8ec$var$showQueuedList","setTimeout","watchedModalBtn","queueModalBtn","watchedList","queuedList","currentId","closest","getAttribute","item","Number","textContent"],"version":3,"file":"library.b03e3792.js.map"}